#!/bin/bash

# Overridable variables.
#
JCL="."
RJE_HOST=$(hostname)
RJE_PORT=3505
VERBOSE=""
JOBNAME=""
JOBDESC=""

# Private variables.
#
me=$(basename "$0")
rcdir="${HOME}/.rje"
jobseqfile="${rcdir}/jobseq"
stepseqfile="${rcdir}/stepseq"
dfltfile="${rcdir}/defaults"
dryrun=""
writeout=""
entryfile=""
job_card="dflt-job.jcl"

optstring="dhI:o:r:s:vw"

# Global substitutions.
#
subvars=(
    DSN				# fully qualified dataset name
    LIB				# DSN for library and DD
    MEM				# PDS member name
    PDS				# partitioned dataset name
    PGM				# program name
    VOLSER			# volume serial number
)

# Substitutions for job cards only
#
jobvars=(
    JOBNAME
    JOBDESC
)

saveables=(
    DSN
    JCL
    MEM
    PDS
    RJE_HOST
    RJE_PORT
    VOLSER
)    


function print_usage
{
    (>&2 cat <<EOF
rje - Remote Job Entry, submit jobs to simulated IBM S/370
rje [OPTIONS] [FILES]
    -d          compose job but do not enter it
    -h          this message
    -I dir      specify JCL library
    -j file     custom job card file
    -o VAR=val  set variable and continue
    -r file     raw file, no substitutions
    -s VAR=val  save variable as default
    -v          verbose output
    -w          write out the job stream
EOF
     )
}


#-----------------------------------------------------------------------
# @fn verbose
# If verbose flag is set, print the argument
# @param 1 string to print
#
function verbose
{
    [ -z "${VERBOSE}" ] && return
    (>&2 echo "//* $1")
}


#-----------------------------------------------------------------------
#
function error
{
    (>&2 echo "${me}: $1")
}


#-----------------------------------------------------------------------
# @fn submit
# Submit composed file to simulated IBM 3505 card reader
# @param 1 
function submit
{
    local jcl="$1"
    local vargs=""
    [ -n "${VERBOSE}" ] && vargs="-vv"

    verbose "submitting ${jcl} to $RJE_HOST:$RJE_PORT"
    if [ -e "${jcl}" ]; then
	cat "${jcl}" | netcat $vargs -q 1 $RJE_HOST $RJE_PORT
    else
	error "internal error: $jcl does not exist"
    fi
}


#-----------------------------------------------------------------------
# @fn digits_of
# @return the portion of the argument that is digits
# @param 1 string from which to extract digits
#
function digits_of
{
    echo "$1" | tr -c -d "0123456789"
}


#-----------------------------------------------------------------------
# @fn is_jcl
# @return true if path exists and contains JCL
#
function is_jcl
{
    local path="$1"
    if [ ! -e "${path}" ]; then
	echo ""
	return 1
    fi

    if [ "$(head -c 2 ${path})" == "//" ]; then
	return 0
    else
	return 1
    fi
}


#-----------------------------------------------------------------------
# @fn trunc_or_pad
# @return string padded or truncated to width
# @param 1 length
# @param 2 string to truncate or pad
#
function trunc_or_pad
{
    local wid=$(digits_of "$1" )
    local str="$2"
    if [ -z "${wid}" -o "${wid}" == "0" ]; then
	error "internal error: truncation width empty"
	exit 16
    fi
    # kludge........
    echo "${str}        " | head -c ${wid}
}


#-----------------------------------------------------------------------
# @fn set_seq
#
function set_seq
{
    local path="$1"
    local val=$(digits_of "$2")    
    if [ -z "${path}" ]; then
	error "internal error: no path for sequence number"
	exit 23
    fi
    if [ -z "${val}" ]; then
	error "internal error: sequence number empty"
	exit 24
    fi
    verbose "setting sequence number ${val} in ${path}"
    echo "${val}" > "${path}"
}


#-----------------------------------------------------------------------
# @fn incr_seq
# @return the sequence number in the path, which is then incremented
# @param 1 the path of the sequence number's file
#
function incr_seq
{
    local path="$1"
    if [ -z "${path}" ]; then
	error "internal error: no path for sequence number"
	exit 56
    fi
    val=$(digits_of $(cat "${path}"))
    if [ -z "${val}" ]; then
	error "internal error: malformed sequence file"
	exit 57
    fi
    echo ${val}
    [ ${val} -ge 9999 ] && val=0
    verbose "incrementing ${path} from ${val}"
    set_seq "${path}" $(expr "${val}" + 1)
}


#-----------------------------------------------------------------------
# @fn seq_job
# @fn seq_step
# @return a uniquely incremented job or step number
#
function seq_job
{
    incr_seq "${jobseqfile}"
}

function seq_step
{
    incr_seq "${stepseqfile}"
}


#-----------------------------------------------------------------------
# @fn uniqname
# @return a unique step name
# @param 1 option prefix
#
function uniqname
{
    local prefix="$1"
    [ -z "${prefix}" ] && prefix="SEQ"
    verbose "seqence prefix ${prefix}"
    seq=$(seq_step)
    trunc_or_pad 8 "${prefix}${seq}"
}


#-----------------------------------------------------------------------
# @fn resolve_path
# @return qualified pathname of file or empty string if none
# @param 1 relative path to locate
#
function resolve_path
{
    local path="$1"
    if [ -e "./${path}" ]; then
	echo "./${path}"
	return
    fi
    if [ -e "${JCL}/${path}" ]; then
	echo "${JCL}/${path}"
	return
    fi
}


sub_and_append()
{
    error "sub and append $*"
}


#-----------------------------------------------------------------------
# @fn compose_job
#
function compose_job
{
    local tmppath=/tmp/rje.$$

    # Start with job card.
    local card=$(resolve_path "${job_card}")
    if [ -z "${card}" ]; then
	error "cannot find job card"
	echo ""
	return
    fi
    verbose "job card ${card}"
    if [ -z "${JOBNAME}" ]; then
	JOBNAME=$(uniqname "J")
    fi
    verbose "job name ${JOBNAME}"
    sub_and_append "${tmppath}" "${card}" ${jobvars[*]}

    echo "${tmppath}"
}


save_saveables()
{
    verbose "saving defaults"
    echo "" > "${dfltfile}"
    for var in ${saveables[*]}; do
	echo "${var}=\"${!var}\"" >> "${dfltfile}"
    done
}


#-----------------------------------------------------------------------
# @fn rje_inti
# Idempotently initialize the RJE facility
#
rje_init()
{
    verbose "making directory ${rcdir}"
    mkdir -p "${rcdir}"

    verbose "setting up sequence number files"
    [ -e "${jobseqfile}" ]  || set_seq "${jobseqfile}"  0
    [ -e "${stepseqfile}" ] || set_seq "${stepseqfile}" 0

    verbose "setting up defaults"
    touch "${dfltfile}"
}



########################################################################
#                                MAIN PROGRAM

[ -e "${dfltfile}" ] && source "${dfltfile}"

# Gots to do this inline so we can set globals
set - $(getopt "${optstring}" $*)
while [ "$1" != "--" ]; do
    case "$1" in
	"-d" ) dry_run="y"                                            ;;
	"-h" ) print_usage; exit 0;                                   ;;
	"-I" ) JCL="$2";                                      shift;  ;;
	"-j" ) job_card="$2";                                 shift;  ;;
	"-o" ) eval "$2";                                     shift;  ;;
	"-r" ) entryfile="$2";                                shift;  ;;
	"-s" ) eval "$2"; dry_run="y";                        shift;  ;;
	"-v" ) VERBOSE="y";                                           ;;
	"-w" ) writeout="y";                                          ;;
	*) exit 1                                                     ;;
    esac
    shift $args
done

rje_init

# Verbosely print operating variables.
for f in ${subvars[*]}; do
    verbose "default $(trunc_or_pad 7 $f) : ${!f}"
done

job_path=$(compose_job)

if [ -z "${dry_run}" ]; then
    submit "${entryfile}"
fi

save_saveables
if [ -n "${writeout}" -a -e "${job_path}" ]; then
    cat "${job_path}"
fi

rm -f "${job_path}"

exit 0
